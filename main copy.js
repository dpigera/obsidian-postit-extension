/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};

// main.dev.js
var { Plugin, PluginSettingTab, Setting, Notice } = require("obsidian");
var DEFAULT_SETTINGS = {
  shortcutKey: "Ctrl+Shift+S"
};
var StickyNotesPlugin = class extends Plugin {
  constructor() {
    super(...arguments);
    __publicField(this, "settings", DEFAULT_SETTINGS);
    __publicField(this, "stickyNoteEl", null);
    __publicField(this, "textAreaEl", null);
    __publicField(this, "keyHandler", null);
  }
  async onload() {
    console.log("Loading Sticky Notes plugin");
    try {
      const loadedData = await this.loadData();
      this.settings = Object.assign({}, DEFAULT_SETTINGS, loadedData || {});
      this.registerCommands();
      this.addSettingTab(new StickyNotesSettingTab(this.app, this));
      this.addStyles();
      this.setupKeyboardListener();
      console.log("Sticky Notes plugin loaded successfully");
      console.log("Configured shortcut key:", this.settings.shortcutKey);
      new Notice("Sticky Notes plugin loaded. Shortcut: " + this.settings.shortcutKey);
    } catch (error) {
      console.error("Error loading Sticky Notes plugin:", error);
    }
  }
  setupKeyboardListener() {
    if (this.keyHandler) {
      document.removeEventListener("keydown", this.keyHandler);
    }
    this.keyHandler = (evt) => {
      if (evt.ctrlKey || evt.shiftKey || evt.altKey || evt.metaKey) {
        console.log("Key pressed (direct listener):", {
          key: evt.key,
          code: evt.code,
          ctrlKey: evt.ctrlKey,
          shiftKey: evt.shiftKey,
          altKey: evt.altKey,
          metaKey: evt.metaKey,
          target: evt.target.tagName,
          activeElement: document.activeElement.tagName
        });
        const { modifiers, key } = this.parseShortcutKey();
        const keyMatches = evt.key.toLowerCase() === key.toLowerCase();
        const ctrlMatches = evt.ctrlKey === modifiers.includes("ctrl");
        const shiftMatches = evt.shiftKey === modifiers.includes("shift");
        const altMatches = evt.altKey === modifiers.includes("alt");
        const metaMatches = evt.metaKey === modifiers.includes("meta");
        if (keyMatches && ctrlMatches && shiftMatches && altMatches && metaMatches) {
          console.log("Shortcut matched! Attempting to create sticky note...");
          const activeLeaf = this.app.workspace.activeLeaf;
          if (activeLeaf && activeLeaf.view && activeLeaf.view.editor) {
            console.log("Active editor found, creating sticky note");
            this.createStickyNote(activeLeaf.view.editor, activeLeaf.view);
            evt.preventDefault();
            evt.stopPropagation();
            return false;
          } else {
            console.log("No active editor found");
          }
        }
      }
    };
    document.addEventListener("keydown", this.keyHandler);
    console.log("Direct keyboard listener set up");
  }
  registerCommands() {
    this.addCommand({
      id: "create-sticky-note",
      name: "Create Sticky Note",
      editorCallback: (editor, view) => {
        console.log("Command executed via command palette");
        this.createStickyNote(editor, view);
      }
    });
    const { modifiers, key } = this.parseShortcutKey();
    console.log("Registering hotkey:", { modifiers, key });
    try {
      this.addCommand({
        id: "create-sticky-note-with-hotkey",
        name: "Create Sticky Note (with hotkey)",
        editorCallback: (editor, view) => {
          console.log("Command executed via built-in hotkey");
          this.createStickyNote(editor, view);
        },
        hotkeys: [
          {
            modifiers,
            key
          }
        ]
      });
      console.log("Registered hotkey command");
    } catch (error) {
      console.error("Failed to register hotkey command:", error);
    }
  }
  addStyles() {
    const styleEl = document.createElement("style");
    styleEl.id = "sticky-notes-styles";
    styleEl.textContent = `
            .sticky-note {
                background-color: #ffeb3b;
                padding: 10px;
                border-radius: 5px;
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
                z-index: 1000;
                min-width: 200px;
                min-height: 150px;
                position: absolute;
                font-family: var(--font-text);
            }
            
            .sticky-note textarea {
                width: 100%;
                height: 100%;
                border: none;
                resize: none;
                background-color: transparent;
                outline: none;
                font-family: inherit;
            }
            
            .sticky-note-header {
                display: flex;
                justify-content: flex-end;
                margin-bottom: 5px;
            }
            
            .sticky-note-close {
                cursor: pointer;
                opacity: 0.7;
            }
            
            .sticky-note-close:hover {
                opacity: 1;
            }
        `;
    document.head.appendChild(styleEl);
  }
  onunload() {
    console.log("Unloading Sticky Notes plugin");
    this.removeStickyNote();
    if (this.keyHandler) {
      document.removeEventListener("keydown", this.keyHandler);
      this.keyHandler = null;
    }
    const styleEl = document.getElementById("sticky-notes-styles");
    if (styleEl)
      styleEl.remove();
  }
  async saveSettings() {
    try {
      await this.saveData(this.settings);
    } catch (error) {
      console.error("Failed to save settings:", error);
      new Notice("Failed to save settings");
    }
  }
  parseShortcutKey() {
    try {
      const parts = this.settings.shortcutKey.split("+");
      const key = parts.pop() || "";
      const modifiers = parts.map((mod) => mod.trim().toLowerCase());
      console.log("Parsed shortcut key:", { original: this.settings.shortcutKey, modifiers, key });
      return { modifiers, key };
    } catch (error) {
      console.error("Error parsing shortcut key:", error);
      return { modifiers: ["ctrl", "shift"], key: "s" };
    }
  }
  createStickyNote(editor, view) {
    this.removeStickyNote();
    try {
      console.log("Creating sticky note");
      const cursor = editor.getCursor();
      const editorViewport = view.contentEl.querySelector(".cm-scroller");
      if (!editorViewport) {
        console.error("Editor viewport not found");
        return;
      }
      const coords = this.getCursorCoordinates(editor, view);
      if (!coords) {
        console.error("Could not determine cursor coordinates");
        return;
      }
      console.log("Cursor coordinates:", coords);
      this.stickyNoteEl = document.createElement("div");
      this.stickyNoteEl.classList.add("sticky-note");
      this.stickyNoteEl.style.position = "absolute";
      this.stickyNoteEl.style.left = `${coords.left}px`;
      this.stickyNoteEl.style.top = `${coords.top}px`;
      const headerEl = document.createElement("div");
      headerEl.classList.add("sticky-note-header");
      const closeButton = document.createElement("span");
      closeButton.classList.add("sticky-note-close");
      closeButton.textContent = "\u2715";
      closeButton.addEventListener("click", () => {
        this.removeStickyNote();
      });
      headerEl.appendChild(closeButton);
      this.stickyNoteEl.appendChild(headerEl);
      this.textAreaEl = document.createElement("textarea");
      this.textAreaEl.placeholder = "Type your note here...";
      this.textAreaEl.addEventListener("keydown", async (e) => {
        var _a;
        if (e.key === "Enter" && !e.shiftKey) {
          e.preventDefault();
          const noteContent = (_a = this.textAreaEl) == null ? void 0 : _a.value;
          if (noteContent) {
            await this.saveAsNewNote(noteContent);
          }
          this.removeStickyNote();
        }
        if (e.key === "Escape") {
          this.removeStickyNote();
        }
      });
      this.stickyNoteEl.appendChild(this.textAreaEl);
      editorViewport.appendChild(this.stickyNoteEl);
      this.textAreaEl.focus();
      console.log("Sticky note created successfully");
    } catch (error) {
      console.error("Error creating sticky note:", error);
    }
  }
  getCursorCoordinates(editor, view) {
    try {
      const cursor = editor.getCursor();
      const editorEl = view.contentEl.querySelector(".cm-editor");
      if (!editorEl)
        return null;
      const lineEl = editorEl.querySelector(`.cm-line:nth-child(${cursor.line + 1})`);
      if (!lineEl)
        return null;
      const lineRect = lineEl.getBoundingClientRect();
      const charWidth = 8;
      const left = lineRect.left + cursor.ch * charWidth;
      const top = lineRect.top;
      return { left, top };
    } catch (error) {
      console.error("Error getting cursor coordinates:", error);
      return null;
    }
  }
  removeStickyNote() {
    if (this.stickyNoteEl && this.stickyNoteEl.parentNode) {
      this.stickyNoteEl.parentNode.removeChild(this.stickyNoteEl);
      this.stickyNoteEl = null;
      this.textAreaEl = null;
    }
  }
  async saveAsNewNote(content) {
    try {
      if (!this.app || !this.app.vault) {
        throw new Error("App or vault not initialized");
      }
      let title = content.split("\n")[0].trim();
      if (!title) {
        title = `Note ${new Date().toISOString().replace(/[:.]/g, "-")}`;
      }
      const filename = `${title.replace(/[\\/:*?"<>|]/g, "-")}.md`;
      await this.app.vault.create(filename, content);
      new Notice(`Note saved as "${filename}"`);
    } catch (error) {
      console.error("Error saving note:", error);
      new Notice("Failed to save note: " + error.message);
    }
  }
};
var StickyNotesSettingTab = class extends PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Sticky Notes Settings" });
    new Setting(containerEl).setName("Shortcut Key").setDesc("Keyboard shortcut to create a sticky note (e.g., Ctrl+Shift+S)").addText((text) => text.setPlaceholder("Ctrl+Shift+S").setValue(this.plugin.settings.shortcutKey).onChange(async (value) => {
      this.plugin.settings.shortcutKey = value;
      await this.plugin.saveSettings();
      this.plugin.setupKeyboardListener();
      new Notice("Shortcut updated to: " + value);
    }));
  }
};
module.exports = StickyNotesPlugin;
